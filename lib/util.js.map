{"version":3,"sources":["../src/util.js"],"names":[],"mappings":";;;;;;;;QASgB,G,GAAA,G;QA4BA,a,GAAA,a;QAYA,O,GAAA,O;QAeA,M,GAAA,M;QAkBA,Q,GAAA,Q;QAIA,I,GAAA,I;;;;;;;;;;AA7ET,SAAS,GAAT,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,UAA7B,EAAyC;AAC9C,SAAO,cAAP,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC;AAC9B,WAAO,GADuB;AAE9B,gBAAY,CAAC,CAAC,UAFgB;AAG9B,cAAU,IAHoB;AAI9B,kBAAc;AAJgB,GAAhC;AAMD;;;;;;;;;AASM,IAAM,4BAAU,MAAM,OAAtB;;;;;;;;;;AAUP,IAAI,WAAW,OAAO,SAAP,CAAiB,QAAhC;AACA,IAAI,gBAAgB,iBAApB;AACO,SAAS,aAAT,CAAwB,GAAxB,EAA6B;AAClC,SAAO,SAAS,IAAT,CAAc,GAAd,MAAuB,aAA9B;AACD;;;;;;;;;;AAUM,SAAS,OAAT,CAAkB,GAAlB,EAAuB,GAAvB,EAA4B;AACjC,MAAI,IAAI,IAAI,MAAZ;AACA,SAAO,GAAP,EAAY;AACV,QAAI,IAAI,CAAJ,MAAW,GAAf,EAAoB,OAAO,CAAP;AACrB;AACD,SAAO,CAAC,CAAR;AACD;;;;;;;;;AASM,SAAS,MAAT,CAAiB,EAAjB,EAAqB,IAArB,EAA2B;AAChC,MAAI,OAAO,OAAO,IAAP,CAAY,IAAZ,CAAX;AACA,MAAI,IAAI,KAAK,MAAb;AACA,SAAO,GAAP,EAAY;AACV,OAAG,KAAK,CAAL,CAAH,IAAc,KAAK,KAAK,CAAL,CAAL,CAAd;AACD;AACD,SAAO,EAAP;AACD;;;;;;;;;;;AAWM,SAAS,QAAT,CAAmB,GAAnB,EAAwB;AAC7B,SAAO,QAAQ,IAAR,IAAgB,QAAO,GAAP,yCAAO,GAAP,OAAe,QAAtC;AACD;;AAEM,SAAS,IAAT,GAAiB,CAAE;;AAEnB,IAAM,4BACX,OAAO,OAAP,KAAmB,WAAnB,IACA,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAFpB;;AAIA,IAAM,sBACX,WACA,OADA,IACW,OAAO,QAAQ,IAAf,KAAwB,UADnC,GAEE,QAAQ,IAFV,GAGE,IAJG","file":"util.js","sourcesContent":["/**\n * Define a property.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nexport function def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true,\n  })\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nexport const isArray = Array.isArray\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString\nvar OBJECT_STRING = '[object Object]'\nexport function isPlainObject (obj) {\n  return toString.call(obj) === OBJECT_STRING\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nexport function indexOf (arr, obj) {\n  var i = arr.length\n  while (i--) {\n    if (arr[i] === obj) return i\n  }\n  return -1\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nexport function extend (to, from) {\n  var keys = Object.keys(from)\n  var i = keys.length\n  while (i--) {\n    to[keys[i]] = from[keys[i]]\n  }\n  return to\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nexport function isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nexport function noop () {}\n\nexport const isDebug =\n  typeof process !== 'undefined' &&\n  process.env.NODE_ENV !== 'production'\n\nexport const warn =\n  isDebug &&\n  console && typeof console.warn === 'function'\n  ? console.warn\n  : noop\n"]}