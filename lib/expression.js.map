{"version":3,"sources":["../src/expression.js"],"names":[],"mappings":";;;;;kBAgCwB,K;;AAhCxB;;;;;;;;;;;;AAYA,SAAS,YAAT,CAAuB,IAAvB,EAA6B;AAC3B,MAAI;;AAEF,WAAO,IAAI,QAAJ,CAAa,OAAb,EAAsB,YAAY,IAAZ,GAAmB,GAAzC,CAAP;;AAED,GAJD,CAIE,OAAO,CAAP,EAAU;AACV,qBACE,yBACA,2BADA,GAC8B,IAFhC;AAID;AACF;;;;;;;;;AASc,SAAS,KAAT,CAAgB,GAAhB,EAAqB;AAClC,QAAM,IAAI,IAAJ,EAAN;AACA,MAAI,SAAS,aAAa,WAAW,GAAxB,CAAb;AACA,SAAO,MAAP;AACD","file":"expression.js","sourcesContent":["import { warn } from './utils'\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn (body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', 'return ' + body + ';')\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    warn(\n      'Invalid expression. ' +\n      'Generated function body: ' + body\n    )\n  }\n}\n\n/**\n * Parse an expression to getter.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nexport default function parse (exp) {\n  exp = exp.trim()\n  var getter = makeGetterFn('scope.' + exp)\n  return getter\n}\n"]}