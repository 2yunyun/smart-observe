{"version":3,"sources":["../src/array.js"],"names":[],"mappings":";;;;;kBAwBwB,K;;AAxBxB;;AAMA,IAAM,aAAa,MAAM,SAAzB;AACA,IAAM,eAAe,OAAO,MAAP,CAAc,UAAd,CAArB;AACA,IAAM,gBAAgB,CACpB,MADoB,EAEpB,KAFoB,EAGpB,OAHoB,EAIpB,SAJoB,EAKpB,QALoB,EAMpB,MANoB,EAOpB,SAPoB,CAAtB;;;;;;;;AAgBe,SAAS,KAAT,CAAgB,GAAhB,EAAqB;AAClC,SAAO,cAAP,CAAsB,GAAtB,EAA2B,YAA3B;AACD;;;;;;AAMD,iBAAK,aAAL,EAAoB,UAAU,MAAV,EAAkB;;AAEpC,MAAI,WAAW,WAAW,MAAX,CAAf;AACA,kBAAI,YAAJ,EAAkB,MAAlB,EAA0B,SAAS,OAAT,GAAoB;;;AAG5C,QAAI,IAAI,UAAU,MAAlB;AACA,QAAI,OAAO,IAAI,KAAJ,CAAU,CAAV,CAAX;AACA,WAAO,GAAP,EAAY;AACV,WAAK,CAAL,IAAU,UAAU,CAAV,CAAV;AACD;AACD,QAAI,SAAS,SAAS,KAAT,CAAe,IAAf,EAAqB,IAArB,CAAb;AACA,QAAI,KAAK,KAAK,MAAd;AACA,QAAI,QAAJ;AACA,YAAQ,MAAR;AACE,WAAK,MAAL;AACE,mBAAW,IAAX;AACA;AACF,WAAK,SAAL;AACE,mBAAW,IAAX;AACA;AACF,WAAK,QAAL;AACE,mBAAW,KAAK,KAAL,CAAW,CAAX,CAAX;AACA;AATJ;AAWA,QAAI,QAAJ,EAAc,GAAG,YAAH,CAAgB,QAAhB;;AAEd,OAAG,GAAH,CAAO,MAAP;AACA,WAAO,MAAP;AACD,GA1BD;AA2BD,CA9BD;;;;;;;;;;;AAyCA,SAAS,IAAT,CAAe,KAAf,EAAsB,GAAtB,EAA2B;AACzB,MAAI,SAAS,KAAK,MAAlB,EAA0B;AACxB,SAAK,MAAL,GAAc,OAAO,KAAP,IAAgB,CAA9B;AACD;AACD,SAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,CAAnB,EAAsB,GAAtB,EAA2B,CAA3B,CAAP;AACD;AACD,gBAAI,UAAJ,EAAgB,MAAhB,EAAwB,IAAxB;;;;;;;;AAQA,SAAS,OAAT,CAAkB,IAAlB,EAAwB;;AAEtB,MAAI,CAAC,KAAK,MAAV,EAAkB;AAClB,MAAI,QAAQ,oBAAQ,IAAR,EAAc,IAAd,CAAZ;AACA,MAAI,QAAQ,CAAC,CAAb,EAAgB;AACd,WAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,CAAnB,CAAP;AACD;AACF;AACD,gBAAI,UAAJ,EAAgB,SAAhB,EAA2B,OAA3B","file":"array.js","sourcesContent":["import {\n  def,\n  each,\n  indexOf,\n} from './utils'\n\nconst arrayProto = Array.prototype\nconst arrayMethods = Object.create(arrayProto)\nconst arrayMutating = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse',\n]\n\n/**\n * Augment an target Array with arrayMethods\n *\n * @param {Array} arr\n */\n\nexport default function amend (arr) {\n  Object.setPrototypeOf(arr, arrayMethods)\n}\n\n/**\n * Intercept mutating methods and emit events\n */\n\neach(arrayMutating, function (method) {\n  // cache original method\n  var original = arrayProto[method]\n  def(arrayMethods, method, function mutator () {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length\n    var args = new Array(i)\n    while (i--) {\n      args[i] = arguments[i]\n    }\n    var result = original.apply(this, args)\n    var ob = this.__ob__\n    var inserted\n    switch (method) {\n      case 'push':\n        inserted = args\n        break\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\nfunction $set (index, val) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1\n  }\n  return this.splice(index, 1, val)[0]\n}\ndef(arrayProto, '$set', $set)\n\n/**\n * Convenience method to remove the element at given index or target element reference.\n *\n * @param {*} item\n */\n\nfunction $remove (item) {\n  /* istanbul ignore if */\n  if (!this.length) return\n  var index = indexOf(this, item)\n  if (index > -1) {\n    return this.splice(index, 1)\n  }\n}\ndef(arrayProto, '$remove', $remove)\n"]}