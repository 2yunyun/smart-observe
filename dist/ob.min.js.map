{"version":3,"file":"ob.min.js","sources":["../src/utils.js","../src/array.js","../src/observe.js","../src/expression.js","../src/batcher.js","../src/watcher.js","../src/ob.js","../src/dep.js","../src/constants.js"],"sourcesContent":["import {IS_DEBUG} from './constants'\n\n/**\n * Define property with value.\n *\n * @param {Object} object\n * @param {String} property\n * @param {*} value\n * @param {Boolean} [enumerable]\n */\n\nexport function def (object, property, value, enumerable) {\n  Object.defineProperty(object, property, {\n    value,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true,\n  })\n}\n\n/**\n * Define property with getter and setter.\n *\n * @param {Object} object\n * @param {String} property\n * @param {Function} getter\n * @param {Function} setter\n */\n\nexport function defi (object, property, getter, setter) {\n  Object.defineProperty(object, property, {\n    get: getter,\n    set: setter,\n    configurable: true,\n    enumerable: true,\n  })\n}\n\n/**\n * Array type check.\n *\n * @return {Boolean}\n */\n\nexport const isArray = Array.isArray\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} object\n * @return {Boolean}\n */\n\nconst toString = Object.prototype.toString\nconst OBJECT_STRING = '[object Object]'\nexport function isPlainObject (object) {\n  return toString.call(object) === OBJECT_STRING\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} object\n * @return {Boolean}\n */\n\nexport function isObject (object) {\n  return object !== null && typeof object === 'object'\n}\n\n/**\n * Function type check\n *\n * @param {*} fun\n * @param {Boolean}\n */\n\nexport function isFunction (fun) {\n  return typeof fun === 'function'\n}\n\n/**\n * Iterate object\n *\n * @param {Object} object\n * @param {Function} cb\n */\n\nexport function every (object, callback) {\n  const keys = Object.keys(object)\n  for (let i = 0, l = keys.length; i < l; i++) {\n    callback(keys[i], object[keys[i]])\n  }\n}\n\n/**\n * noop is function which is nothing to do.\n */\n\nexport function noop () {}\n\n/**\n * @param {String} string\n */\n\nexport const warn =\n  IS_DEBUG\n  && console\n  && isFunction(console.warn)\n    ? console.warn\n    : noop\n\nexport let _Set\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {\n  // use native Set when available.\n  _Set = Set\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    this.set = Object.create(null)\n  }\n  _Set.prototype.has = function (key) {\n    return this.set[key] !== undefined\n  }\n  _Set.prototype.add = function (key) {\n    this.set[key] = 1\n  }\n  _Set.prototype.clear = function () {\n    this.set = Object.create(null)\n  }\n}\n","import {def} from './utils'\nimport {OB_NAME} from './constants'\n\nconst arrayPrototype = Array.prototype\nconst arrayMethods = Object.create(arrayPrototype)\nconst arrayMutativeMethods = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse',\n]\n\n/**\n * Augment an target Array with arrayMethods\n *\n * @param {Array} array\n */\n\nexport default function amend (array) {\n  Object.setPrototypeOf(array, arrayMethods)\n}\n\n/**\n * Intercept mutating methods and emit events\n */\n\nfor (\n  let i = 0, l = arrayMutativeMethods.length, method;\n  i < l;\n  method = arrayMutativeMethods[++i]\n) {\n  // cache original method\n  const original = arrayPrototype[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this[OB_NAME]\n    let inserted\n    switch (method) {\n      case 'push':\n        inserted = args\n        break\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    ob.dep.notify()  // notify change\n    return result\n  })\n}\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} value\n * @return {*} - replaced element\n */\n\nfunction $set (index, value) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1\n  }\n  return this.splice(index, 1, value)[0]\n}\ndef(arrayPrototype, '$set', $set)\n\n/**\n * Convenience method to remove the element at given index\n * or target element reference.\n *\n * @param {*} item\n */\n\nfunction $remove (item) {\n  /* istanbul ignore if */\n  if (!this.length) return\n  const index = this.indexOf(item)\n  if (index > -1) {\n    return this.splice(index, 1)\n  }\n}\ndef(arrayPrototype, '$remove', $remove)\n","import Dep from './dep'\nimport amendArray from './array'\nimport {\n  def,\n  defi,\n  isArray,\n  isPlainObject,\n  every,\n} from './utils'\nimport {OB_NAME} from './constants'\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @class\n * @param {Array|Object} value\n */\n\nclass Observer {\n  constructor (value) {\n    this.value = value\n    this.dep = new Dep()\n    def(value, OB_NAME, this)\n    if (isArray(value)) {\n      amendArray(value)\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n\n  /**\n   * Walk through each property and convert them into\n   * getter/setters. This method should only be called when\n   * value type is Object.\n   *\n   * @param {Object} object\n   */\n\n  walk (object) {\n    every(object, (key, value) => this.convert(key, value))\n  }\n\n  /**\n   * Observe a list of Array items.\n   *\n   * @param {Array} items\n   */\n\n  observeArray (items) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n\n  /**\n   * Convert a property into getter/setter so we can emit\n   * the events when the property is accessed/changed.\n   *\n   * @param {String} key\n   * @param {*} value\n   */\n\n  convert (key, value) {\n    defineReactive(this.value, key, value)\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @return {Observer|undefined}\n */\n\nexport function observe (value) {\n  if (!value || typeof value !== 'object') return\n  let observer\n  if (\n    Object.prototype.hasOwnProperty.call(value, OB_NAME)\n    && value[OB_NAME] instanceof Observer\n  ) {\n    observer = value[OB_NAME]\n  } else if (\n    (isArray(value) || isPlainObject(value))\n    && Object.isExtensible(value)\n  ) {\n    observer = new Observer(value)\n  }\n  return observer\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} object\n * @param {String} key\n * @param {*} value\n */\n\nexport function defineReactive (object, key, value) {\n  const dep = new Dep()\n\n  const desc = Object.getOwnPropertyDescriptor(object, key)\n  if (desc && desc.configurable === false) return\n\n  // cater for pre-defined getter/setters\n  const getter = desc && desc.get\n  const setter = desc && desc.set\n\n  let childOb = observe(value)\n\n  function reactiveGetter () {\n    const currentValue = getter ? getter.call(object) : value\n    if (Dep.target) {\n      dep.depend()\n      if (childOb) {\n        childOb.dep.depend()\n      }\n      if (isArray(currentValue)) {\n        for (let i = 0, l = currentValue.length, e; i < l; i++) {\n          e = currentValue[i]\n          e && e[OB_NAME] && e[OB_NAME].dep.depend()\n        }\n      }\n    }\n    return currentValue\n  }\n  function reactiveSetter (newValue) {\n    const oldValue = getter ? getter.call(object) : value\n    if (newValue === oldValue) return\n    if (setter) {\n      setter.call(object, newValue)\n    } else {\n      value = newValue\n    }\n    childOb = observe(newValue)\n    dep.notify()\n  }\n  defi(object, key, reactiveGetter, reactiveSetter)\n}\n","import {warn} from './utils'\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFunction (body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', `return ${body};`)\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    warn('Invalid expression. Generated function body: ' + body)\n  }\n}\n\n/**\n * Parse an expression to getter.\n *\n * @param {String} expression\n * @return {Function|undefined}\n */\n\nexport default function parse (expression) {\n  expression = String.prototype.trim.call(expression)\n  return makeGetterFunction('scope.' + expression)\n}\n","let queue = []\nlet has = {}\nlet waiting = false\nlet queueIndex\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState () {\n  queue = []\n  has = {}\n  waiting = false\n}\n\n/**\n * Flush queue and run the watchers.\n */\n\nfunction flushBatcherQueue () {\n  runBatcherQueue(queue)\n  resetBatcherState()\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue (queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (queueIndex = 0; queueIndex < queue.length; queueIndex++) {\n    const watcher = queue[queueIndex]\n    const id = watcher.id\n    has[id] = null\n    watcher.run()\n  }\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} callback\n * @param {Object} context\n */\n\nconst nextTick = (function () {\n  let callbacks = []\n  let pending = false\n  let timerFunction\n  function nextTickHandler () {\n    pending = false\n    const callbackCopies = callbacks.slice(0)\n    callbacks = []\n    for (let i = 0; i < callbackCopies.length; i++) {\n      callbackCopies[i]()\n    }\n  }\n\n  /* istanbul ignore if */\n  if (typeof MutationObserver !== 'undefined') {\n    let counter = 1\n    /* global MutationObserver */\n    const observer = new MutationObserver(nextTickHandler)\n    /* global */\n    const textNode = document.createTextNode(counter)\n    observer.observe(textNode, {characterData: true})\n    timerFunction = function () {\n      counter = (counter + 1) % 2\n      textNode.data = counter\n    }\n  } else {\n    // webpack attempts to inject a shim for setImmediate\n    // if it is used as a global, so we have to work around that to\n    // avoid bundling unnecessary code.\n    const inBrowser = typeof window !== 'undefined'\n      && Object.prototype.toString.call(window) !== '[object Object]'\n    const context =\n      inBrowser ? window : typeof global !== 'undefined' ? global : {}\n    timerFunction = context.setImmediate || setTimeout\n  }\n  return function (callback, context) {\n    const fun = context ? function () { callback.call(context) } : callback\n    callbacks.push(fun)\n    if (pending) return\n    pending = true\n    timerFunction(nextTickHandler, 0)\n  }\n})()\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nexport default function batch (watcher) {\n  const id = watcher.id\n  if (has[id] == null) {\n    has[id] = queue.length\n    queue.push(watcher)\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n      nextTick(flushBatcherQueue)\n    }\n  }\n}\n","import ob from './ob.js'\nimport Dep from './dep'\nimport parseExpression from './expression'\nimport batch from './batcher'\nimport {\n  isArray,\n  isObject,\n  isFunction,\n  _Set as Set,\n} from './utils'\nimport {WATCHERS_PROPERTY_NAME} from './constants'\n\nlet uid = 0\n\nclass Watcher {\n\n  /**\n   * A watcher parses an expression, collects dependencies,\n   * and fires callback when the expression value changes.\n   *\n   * @param {Object} owner\n   * @param {String|Function} getter\n   * @param {Function} callback\n   * @param {Object} options\n   *                 - {Boolean} deep\n   *                 - {Boolean} sync\n   *                 - {Boolean} lazy\n   * @constructor\n   */\n\n  constructor (owner, getter, callback, options) {\n    owner[WATCHERS_PROPERTY_NAME].push(this)\n    this.owner = owner\n    this.getter = getter\n    this.callback = callback\n    this.options = options\n    // uid for batching\n    this.id = ++uid\n    this.active = true\n    // for lazy watchers\n    this.dirty = options.lazy\n    this.deps = []\n    this.newDeps = []\n    this.depIds = new Set()\n    this.newDepIds = new Set()\n    this.value = options.lazy\n      ? undefined\n      : this.get()\n  }\n\n  /**\n   * Evaluate the getter, and re-collect dependencies.\n   */\n\n  get () {\n    this.beforeGet()\n    const scope = this.owner\n    const value = this.getter.call(scope, scope)\n    if (this.options.deep) {\n      traverse(value)\n    }\n    this.afterGet()\n    return value\n  }\n\n  /**\n   * Prepare for dependency collection.\n   */\n\n  beforeGet () {\n    Dep.target = this\n  }\n\n  /**\n   * Add a dependency to this directive.\n   *\n   * @param {Dep} dep\n   */\n\n  addDep (dep) {\n    const id = dep.id\n    if (!this.newDepIds.has(id)) {\n      this.newDepIds.add(id)\n      this.newDeps.push(dep)\n      if (!this.depIds.has(id)) {\n        dep.addSub(this)\n      }\n    }\n  }\n\n  /**\n   * Clean up for dependency collection.\n   */\n\n  afterGet () {\n    Dep.target = null\n    let i = this.deps.length\n    while (i--) {\n      const dep = this.deps[i]\n      if (!this.newDepIds.has(dep.id)) {\n        dep.removeSub(this)\n      }\n    }\n    let tmp = this.depIds\n    this.depIds = this.newDepIds\n    this.newDepIds = tmp\n    this.newDepIds.clear()\n    tmp = this.deps\n    this.deps = this.newDeps\n    this.newDeps = tmp\n    this.newDeps.length = 0\n  }\n\n  /**\n   * Will be called when a dependency changes.\n   */\n\n  update () {\n    if (this.options.lazy) {\n      this.dirty = true\n    } else if (this.options.sync) {\n      this.run()\n    } else {\n      batch(this)\n    }\n  }\n\n  /**\n   * Will be called by the batcher.\n   */\n\n  run () {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value\n        // Deep watchers and watchers on Object/Arrays should fire even when\n        // the value is the same, because the value may have mutated;\n        || ((isObject(value) || this.options.deep))\n      ) {\n        const oldValue = this.value\n        this.value = value\n        this.callback.call(this.owner, value, oldValue)\n      }\n    }\n  }\n\n  /**\n   * Evaluate the value of the watcher.\n   * This only gets called for lazy watchers.\n   */\n\n  evaluate () {\n    // avoid overwriting another watcher that is being collected.\n    const current = Dep.target\n    this.value = this.get()\n    this.dirty = false\n    Dep.target = current\n  }\n\n  /**\n   * Depend on all deps collected by this watcher.\n   */\n\n  depend () {\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].depend()\n    }\n  }\n\n  /**\n   * Remove self from all dependencies' subcriber list.\n   */\n\n  teardown () {\n    if (this.active) {\n      let i = this.deps.length\n      while (i--) {\n        this.deps[i].removeSub(this)\n      }\n      this.active = false\n      this.owner = this.callback = this.value = null\n    }\n  }\n}\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} value\n */\n\nfunction traverse (value) {\n  let i, keys\n  if (isArray(value)) {\n    i = value.length\n    while (i--) traverse(value[i])\n  } else if (isObject(value)) {\n    keys = Object.keys(value)\n    i = keys.length\n    while (i--) traverse(value[keys[i]])\n  }\n}\n\n/**\n * Create an watcher instance, returns the new watcher.\n *\n * @param {Object} owner\n * @param {String|Function} expressionOrFunction\n * @param {Function} callback\n * @param {Object} options\n *                 - {Boolean} deep\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n * @return {Watcher}\n */\n\nexport function watch (owner, expressionOrFunction, callback, options) {\n  // parse expression for getter\n  const getter = isFunction(expressionOrFunction)\n               ? expressionOrFunction\n               : parseExpression(expressionOrFunction)\n  return new Watcher(owner, getter, callback, options)\n}\n\n/**\n * Make a computed getter, which can collect dependencies.\n *\n * @param {Object} owner\n * @param {Function} getter\n */\n\nexport function makeComputed (owner, getter) {\n  const watcher = new Watcher(owner, getter, null, {\n    deep: ob.deep,\n    lazy: true,\n    sync: ob.sync,\n  })\n  return function computedGetter () {\n    if (watcher.options.lazy && Dep.target && !Dep.target.options.lazy) {\n      watcher.options.lazy = false\n      watcher.callback = function () {\n        const deps = watcher.deps\n        for (let i = 0, l = deps.length; i < l; i++) {\n          deps[i].notify()\n        }\n      }\n    }\n    if (watcher.dirty) {\n      watcher.evaluate()\n    }\n    if (Dep.target) {\n      watcher.depend()\n    }\n    return watcher.value\n  }\n}\n","import {\n  observe,\n  defineReactive,\n} from './observe'\nimport {\n  watch as watche,\n  makeComputed,\n} from './watcher'\nimport {\n  def,\n  defi,\n  noop,\n  isFunction,\n  every,\n} from './utils'\nimport {\n  WATCHERS_PROPERTY_NAME,\n  DATA_PROPTERTY_NAME,\n} from './constants'\n\n// Only could be react, compute or watch\nob.default = watch\nob.deep = ob.lazy = ob.sync = false\n\nObject.setPrototypeOf(ob, {react, compute, watch})\n\n/**\n * ob\n *\n * @public\n * @param {Object} target\n * @param {*} [expression]\n * @param {*} [fun]\n * @param {*} [options]\n * @return {Function} ob\n */\n\nexport default function ob (target, expression, fun, options) {\n  if (!target.hasOwnProperty(WATCHERS_PROPERTY_NAME)) {\n    init(target)\n  }\n  return ob.default(target, expression, fun, options)\n}\n\n/**\n * React options\n *\n * @public\n * @param {Object} options\n * @param {Object} [target]\n * @return {Function} ob\n */\n\nfunction react (options, target) {\n  if (target) {\n    if (!target.hasOwnProperty(WATCHERS_PROPERTY_NAME)) {\n      init(target)\n    }\n  } else {\n    target = {}\n    init(target)\n  }\n  options.methods && carryMethods(target, options.methods)\n  options.data && reactProperties(target, options.data)\n  options.computed && computeProperties(target, options.computed)\n  options.watchers && watchProperties(target, options.watchers)\n  return target\n}\n\n/**\n * Compute property\n *\n * @public\n * @param {Object} target\n * @param {String} name\n * @param {Function|Object} getterOrAccessor\n *        - Function getter\n *        - Object accessor\n *          - Function [get]  - getter\n *          - Function [set]  - setter\n *          - Boolean [cache]\n * @param {Boolean} [cache]\n */\n\nfunction compute (target, name, getterOrAccessor, cache) {\n  if (!target.hasOwnProperty(WATCHERS_PROPERTY_NAME)) {\n    init(target)\n  }\n  let getter, setter\n  if (isFunction(getterOrAccessor)) {\n    getter = cache !== false\n            ? makeComputed(target, getterOrAccessor)\n            : getterOrAccessor.bind(this)\n    setter = noop\n  } else {\n    getter = getterOrAccessor.get\n            ? getterOrAccessor.cache !== false || cache !== false\n              ? makeComputed(target, getterOrAccessor.get)\n              : getterOrAccessor.get.bind(this)\n            : noop\n    setter = getterOrAccessor.set ? getterOrAccessor.set.bind(this) : noop\n  }\n  defi(target, name, getter, setter)\n}\n\n/**\n * Watch property\n *\n * @public\n * @param {Object} target\n * @param {String|Function} expressionOrFunction\n * @param {Function} callback\n * @param {Object} [options]\n *                 - {Boolean} deep\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n * @return {Watcher}\n */\n\nfunction watch (target, expressionOrFunction, callback, options = ob) {\n  if (!target.hasOwnProperty(WATCHERS_PROPERTY_NAME)) {\n    init(target)\n  }\n  return watche(target, expressionOrFunction, callback, options)\n}\n\n/**\n * @private\n * @param {Object} target\n */\n\nfunction init (target) {\n  def(target, WATCHERS_PROPERTY_NAME, [], false)\n  def(target, DATA_PROPTERTY_NAME, Object.create(null), false)\n  observe(target[DATA_PROPTERTY_NAME])\n  reactSelfProperties(target)\n}\n\n/**\n * @private\n * @param {Object} target\n * @param {Object} methods\n */\n\nfunction carryMethods (target, methods) {\n  every(methods, (name, method) => {\n    target[name] = method.bind(target)\n  })\n}\n\n/**\n * @private\n * @param {Object} target\n * @param {String} key\n * @param {*} value\n */\nfunction reactProperty (target, key, value) {\n  target[DATA_PROPTERTY_NAME][key] = value\n  defineReactive(target[DATA_PROPTERTY_NAME], key, value)\n  proxy(target, key)\n}\n\n/**\n * @private\n * @param {Object} target\n * @param {Object} properties\n */\n\nfunction reactProperties (target, properties) {\n  every(properties, (key, value) => reactProperty(target, key, value))\n}\n\n/**\n * @private\n * @param {Object} target\n */\n\nfunction reactSelfProperties (target) {\n  every(target, (key, value) => {\n    !isFunction(value) && reactProperty(target, key, value)\n  })\n}\n\n/**\n * @private\n * @param {Object} target\n * @param {Object} properties\n */\n\nfunction computeProperties (target, properties) {\n  every(properties, (key, value) => compute(target, key, value))\n}\n\n/**\n * @private\n * @param {Object} target\n * @param {Object} properties\n */\n\nfunction watchProperties (target, properties) {\n  every(properties, (expression, functionOrOption) => {\n    if (isFunction(functionOrOption)) {\n      watch(target, expression, functionOrOption)\n    } else {\n      watch(target, expression, functionOrOption.watcher, functionOrOption)\n    }\n  })\n}\n\n/**\n * @private\n * @param {Object} target\n * @param {String} key\n */\n\nfunction proxy (target, key) {\n  function getter () {\n    return target[DATA_PROPTERTY_NAME][key]\n  }\n  function setter (value) {\n    target[DATA_PROPTERTY_NAME][key] = value\n  }\n  defi(target, key, getter, setter)\n}\n","let uid = 0\n\n/**\n * A dep is an observable that can have multiple\n * watcher subscribing to it.\n *\n * @constructor\n */\n\nexport default class Dep {\n  // the current target watcher being evaluated.\n  // this is globally unique because there could be only one\n  // watcher being evaluated at any time.\n  static target = null\n\n  constructor () {\n    this.id = uid++\n    this.subs = []\n  }\n\n  /**\n   * Add a subscriber.\n   *\n   * @param {Watcher} sub\n   */\n\n  addSub (sub) {\n    this.subs.push(sub)\n  }\n\n  /**\n   * Remove a subscriber.\n   *\n   * @param {Watcher} sub\n   */\n\n  removeSub (sub) {\n    this.subs.$remove(sub)\n  }\n\n  /**\n   * Add self as a dependency to the target watcher.\n   */\n\n  depend () {\n    Dep.target.addDep(this)\n  }\n\n  /**\n   * Notify all subscribers of a new value.\n   */\n\n  notify () {\n    const subs = this.subs\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n","export const OB_NAME = '__ob__'\nexport const WATCHERS_PROPERTY_NAME = '__watchers__'\nexport const DATA_PROPTERTY_NAME = '__data__'\n\nexport const IS_DEBUG = typeof process !== 'undefined'\n                        && process.env.NODE_ENV !== 'production'\n"],"names":["def","object","property","value","enumerable","defineProperty","defi","getter","setter","isPlainObject","toString","call","OBJECT_STRING","isObject","isFunction","fun","every","callback","keys","Object","i","l","length","noop","amend","array","setPrototypeOf","arrayMethods","$set","index","this","Number","splice","$remove","item","indexOf","observe","observer","prototype","hasOwnProperty","OB_NAME","Observer","isArray","isExtensible","defineReactive","key","reactiveGetter","currentValue","Dep","target","depend","childOb","dep","e","reactiveSetter","newValue","oldValue","notify","desc","getOwnPropertyDescriptor","configurable","get","set","makeGetterFunction","body","Function","parse","expression","String","trim","resetBatcherState","flushBatcherQueue","queue","runBatcherQueue","queueIndex","watcher","id","run","batch","has","push","waiting","traverse","watch","owner","expressionOrFunction","options","parseExpression","Watcher","makeComputed","ob","deep","sync","lazy","deps","dirty","evaluate","WATCHERS_PROPERTY_NAME","default","react","methods","carryMethods","data","reactProperties","computed","computeProperties","watchers","watchProperties","compute","name","getterOrAccessor","cache","bind","watche","init","DATA_PROPTERTY_NAME","create","method","reactProperty","properties","reactSelfProperties","functionOrOption","proxy","uid","subs","sub","addDep","update","IS_DEBUG","process","env","NODE_ENV","Array","warn","console","_Set","Set","match","undefined","add","clear","arrayPrototype","arrayMutativeMethods","original","args","result","apply","inserted","slice","observeArray","walk","_this","convert","items","nextTick","nextTickHandler","callbackCopies","callbacks","pending","timerFunction","MutationObserver","counter","textNode","document","createTextNode","characterData","inBrowser","window","context","global","setImmediate","setTimeout","active","newDeps","depIds","newDepIds","beforeGet","scope","afterGet","addSub","removeSub","tmp","current"],"mappings":"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"}